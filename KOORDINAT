import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Wedge
from mpl_toolkits.mplot3d import Axes3D

# ===== Fungsi Konversi =====
def degree_to_radian(degree):
    return degree * (math.pi / 180)

def radian_to_degree(radian):
    return radian * (180 / math.pi)

def polar_to_cartesian(radius, angle_degree):
    angle_radian = degree_to_radian(angle_degree)
    x = radius * math.cos(angle_radian)
    y = radius * math.sin(angle_radian)
    return x, y

def cartesian_to_polar(x, y):
    radius = math.sqrt(x**2 + y**2)
    angle_radian = math.atan2(y, x)
    angle_degree = radian_to_degree(angle_radian)
    return radius, angle_degree

def cylindrical_to_3d_cartesian(rho, phi, z3d):
    phi_radian = degree_to_radian(phi)
    x3d = rho * math.cos(phi_radian)
    y3d = rho * math.sin(phi_radian)
    return x3d, y3d, z3d

def three_dimensional_cartesian_to_cylindrical(x3d, y3d, z3d):
    rho = math.sqrt(x3d**2 + y3d**2)
    phi = radian_to_degree(math.atan2(y3d, x3d))
    return rho, phi, z3d

def spherical_to_3d_cartesian(r, theta, phi):
    theta_radian = degree_to_radian(theta)
    phi_radian = degree_to_radian(phi)
    x3d = r * math.sin(phi_radian) * math.cos(theta_radian)
    y3d = r * math.sin(phi_radian) * math.sin(theta_radian)
    z3d = r * math.cos(phi_radian)
    return x3d, y3d, z3d

def three_dimensional_cartesian_to_spherical(x3ds, y3ds, z3ds):
    r = math.sqrt(x3ds**2 + y3ds**2 + z3ds**2)
    theta = radian_to_degree(math.atan2(y3ds, x3ds))
    phi = radian_to_degree(math.acos(z3ds / r)) if r != 0 else 0
    return r, theta, phi

# ===== Data Contoh =====
r_polar, theta_polar = 10, 45
x_p, y_p = polar_to_cartesian(r_polar, theta_polar)

x_cp, y_cp = 2, 5
radius_cp, angle_cp = cartesian_to_polar(x_cp, y_cp)

rho_cyl, phi_cyl, z_cyl = 5, 25, 4
x_c, y_c, z_c = cylindrical_to_3d_cartesian(rho_cyl, phi_cyl, z_cyl)

x_cc, y_cc, z_cc = 2, 5, 7
rho_cc, phi_cc, z_cc = three_dimensional_cartesian_to_cylindrical(x_cc, y_cc, z_cc)

r_sph, theta_sph, phi_sph = 7, 30, 60
x_s, y_s, z_s = spherical_to_3d_cartesian(r_sph, theta_sph, phi_sph)

x_sc, y_sc, z_sc = 2, 5, 7
r_sc, theta_sc, phi_sc = three_dimensional_cartesian_to_spherical(x_sc, y_sc, z_sc)

# ===== Print ke Terminal =====
print("=== Konversi Koordinat ===")
print(f"Polar → Cartesian: ({r_polar}, {theta_polar}°) → ({x_p:.2f}, {y_p:.2f})")
print(f"Cartesian → Polar: ({x_cp}, {y_cp}) → r={radius_cp:.2f}, θ={angle_cp:.2f}°")
print(f"Cylindrical → Cartesian: (ρ={rho_cyl}, φ={phi_cyl}°, z={z_cyl}) → ({x_c:.2f}, {y_c:.2f}, {z_c:.2f})")
print(f"Cartesian → Cylindrical: ({x_cc}, {y_cc}, {z_cc}) → ρ={rho_cc:.2f}, φ={phi_cc:.2f}°, z={z_cc:.2f}")
print(f"Spherical → Cartesian: (r={r_sph}, θ={theta_sph}°, φ={phi_sph}°) → ({x_s:.2f}, {y_s:.2f}, {z_s:.2f})")
print(f"Cartesian → Spherical: ({x_sc}, {y_sc}, {z_sc}) → r={r_sc:.2f}, θ={theta_sc:.2f}°, φ={phi_sc:.2f}°")

# ===== Visualisasi Satu per Satu =====

# 1. Polar → Cartesian
plt.figure()
plt.title("Polar → Cartesian")
plt.plot([0, x_p], [0, y_p], color='deepskyblue', linewidth=2, marker='o')
plt.text(x_p, y_p, f"x={x_p:.2f}\ny={y_p:.2f}")
wedge = Wedge((0,0), r_polar*0.3, 0, theta_polar, facecolor='cyan', alpha=0.4)
plt.gca().add_patch(wedge)
circle = plt.Circle((0,0), r_polar, color='gray', fill=False, linestyle='--')
plt.gca().add_artist(circle)
plt.grid(True)
plt.axis('equal')
plt.show()

# 2. Cartesian → Polar
plt.figure()
plt.title("Cartesian → Polar")
plt.plot([0, x_cp], [0, y_cp], color='purple', linewidth=2, marker='o')
plt.text(x_cp, y_cp, f"r={radius_cp:.2f}\nθ={angle_cp:.2f}°")
wedge2 = Wedge((0,0), radius_cp*0.3, 0, angle_cp, facecolor='pink', alpha=0.4)
plt.gca().add_patch(wedge2)
plt.grid(True)
plt.axis('equal')
plt.show()

# 3. Cylindrical → Cartesian
fig = plt.figure()
ax3 = fig.add_subplot(111, projection='3d')
phi_rad_cyl = degree_to_radian(phi_cyl)
theta_vals = np.linspace(0, phi_rad_cyl, 30)
z_vals = np.linspace(0, z_cyl, 30)
theta_mesh, z_mesh = np.meshgrid(theta_vals, z_vals)
x_mesh = rho_cyl * np.cos(theta_mesh)
y_mesh = rho_cyl * np.sin(theta_mesh)
ax3.plot_surface(x_mesh, y_mesh, z_mesh, color='turquoise', alpha=0.5)
phi_arc = np.linspace(0, phi_rad_cyl, 30)
ax3.plot(rho_cyl*np.cos(phi_arc), rho_cyl*np.sin(phi_arc), 0, color='yellow', alpha=0.8)
ax3.plot([0, x_c], [0, y_c], [0, 0], 'k--')
ax3.plot([x_c, x_c], [y_c, y_c], [0, z_c], 'k--')
ax3.quiver(0, 0, 0, x_c, y_c, z_c, color='darkgreen', arrow_length_ratio=0.1)
ax3.text(x_c, y_c, z_c, f"x={x_c:.2f}\ny={y_c:.2f}\nz={z_c:.2f}")
ax3.set_title("Cylindrical → Cartesian")
plt.show()

# 4. Cartesian → Cylindrical
fig = plt.figure()
ax4 = fig.add_subplot(111, projection='3d')
phi_rad_cc = degree_to_radian(phi_cc)
theta_vals2 = np.linspace(0, phi_rad_cc, 30)
z_vals2 = np.linspace(0, z_cc, 30)
theta_mesh2, z_mesh2 = np.meshgrid(theta_vals2, z_vals2)
x_mesh2 = rho_cc * np.cos(theta_mesh2)
y_mesh2 = rho_cc * np.sin(theta_mesh2)
ax4.plot_surface(x_mesh2, y_mesh2, z_mesh2, color='orange', alpha=0.5)
phi_arc2 = np.linspace(0, phi_rad_cc, 30)
ax4.plot(rho_cc*np.cos(phi_arc2), rho_cc*np.sin(phi_arc2), 0, color='hotpink', alpha=0.8)
ax4.plot([0, x_cc], [0, y_cc], [0, 0], 'k--')
ax4.plot([x_cc, x_cc], [y_cc, y_cc], [0, z_cc], 'k--')
ax4.quiver(0, 0, 0, x_cc, y_cc, z_cc, color='navy', arrow_length_ratio=0.1)
ax4.text(x_cc, y_cc, z_cc, f"ρ={rho_cc:.2f}\nφ={phi_cc:.2f}°\nz={z_cc:.2f}")
ax4.set_title("Cartesian → Cylindrical")
plt.show()

# 5. Spherical → Cartesian
fig = plt.figure()
ax5 = fig.add_subplot(111, projection='3d')
ax5.quiver(0, 0, 0, x_s, y_s, z_s, color='red', arrow_length_ratio=0.1)
ax5.text(x_s, y_s, z_s, f"x={x_s:.2f}\ny={y_s:.2f}\nz={z_s:.2f}")
ax5.plot([0, x_s], [0, y_s], [0, 0], 'k--')
ax5.plot([x_s, x_s], [y_s, y_s], [0, z_s], 'k--')
ax5.set_title("Spherical → Cartesian")
plt.show()

# 6. Cartesian → Spherical
fig = plt.figure()
ax6 = fig.add_subplot(111, projection='3d')
ax6.quiver(0, 0, 0, x_sc, y_sc, z_sc, color='dodgerblue', arrow_length_ratio=0.1)
ax6.text(x_sc, y_sc, z_sc, f"r={r_sc:.2f}\nθ={theta_sc:.2f}°\nφ={phi_sc:.2f}°")
ax6.plot([0, x_sc], [0, y_sc], [0, 0], 'k--')
ax6.plot([x_sc, x_sc], [y_sc, y_sc], [0, z_sc], 'k--')
ax6.set_title("Cartesian → Spherical")
plt.show()

